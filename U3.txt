Aufgabe 1)
Nachrichten versenden mit TCP: 
Terminal 1: Honou@MeinLaptop MINGW64 ~/Desktop/netcat/Java - netcat TCP/src (release)
$ java oxoo2a.Main -l 1234
Hallo

Terminal 2: Honou@MeinLaptop MINGW64 ~/Desktop/netcat/Java - netcat TCP/src (release)
$ java oxoo2a.Main 127.0.0.1 1234
Hallo

In Wireshark wird bei loopback mit dem Filter tcp.port == 1234 jedoch nichts gefunden, ich verstehe nicht wieso.

Nachrichten versenden mit TCP:
Terminal 1: Honou@MeinLaptop MINGW64 ~/Desktop/netcat/Java - netcat UDP/src (release)
$ java oxoo2a.Main -l 1234
HALLO

Terminal 2: Honou@MeinLaptop MINGW64 ~/Desktop/netcat/Java - netcat UDP/src (release)
$ java oxoo2a.Main 127.0.0.1 1234
HALLO

In Wireshark sind komischerweise bei loopback nur TCP Pakete (bei Filter udp kommt kein Ergebnis).

Da bei mir in loopback weil beides über 127.0.0.1 geht nur TCP-Pakete angezeigt werden, sehen die beiden PCAP Dateien quasi gleich aus.
Weiß nicht wo der Fehler liegt, die Nachricht "Hallo" die ich übergeben habe finde ich auch nicht.
Generell sollten aber die Unterschiede zwischen den TCP und UDP Programmen sein, dass:
TCP zuerst eine Verbindung mit einem 3-Wege-Handshake aufbaut (SYN → SYN-ACK → ACK), in dem gesendete Datenpakete mit einer Sequenznummer versehen werden und vom Empfänger bestätigt werden müssen (ACK).
UDP Nachrichten ohne Verbindungsaufbau oder Rückmeldung sendet, sodass die Pakete direkt erscheinen ohne Kontrolle der Reihenfolge. UDP ist also schneller und leichter, aber unzuverlässiger.

Aufgabe 2/3: siehe veränderter Code (bei mir hat er funktioniert)

Aufgabe 4: 
Clock:      		 -_-_-_-_-_-_-_
Bitfolge:   		 -__-_-__---_--
			  0 1 1 0 1 0 1 
Manchester-Code:  	 _--_-__--__--_